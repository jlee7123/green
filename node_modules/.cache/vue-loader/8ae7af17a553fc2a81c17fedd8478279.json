{"remainingRequest":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\src\\components\\approval.vue?vue&type=template&id=2b5f58d3&","dependencies":[{"path":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\src\\components\\approval.vue","mtime":1667806804825},{"path":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667198110248},{"path":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1667198119828},{"path":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1667198110248},{"path":"C:\\Users\\admin\\Desktop\\vue\\oneM2M_vueapplication\\node_modules\\vue-loader\\lib\\index.js","mtime":1667198119828}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}